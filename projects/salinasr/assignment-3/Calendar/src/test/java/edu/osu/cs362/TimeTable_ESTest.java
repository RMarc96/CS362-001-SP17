/*
 * This file was automatically generated by EvoSuite
 * Sun May 14 07:22:30 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import edu.osu.cs362.TimeTable;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
//import org.evosuite.runtime.EvoRunner;
//import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.TooManyResourcesException;
//import org.evosuite.runtime.mock.java.util.GregorianCalendar;
//import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

//@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true) 
public class TimeTable_ESTest {

/*
  @Test
  public void test00()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar(0, 3095, (-1), 2804, (-1), (-1));
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange((LinkedList<Appt>) null, GregorianCalendar0, GregorianCalendar1);
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
        // assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }*/

  @Test
  public void test01()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, (GregorianCalendar) null, (GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
        // assertThrownBy("edu.osu.cs362.TimeTable", e);
      }
  }

  @Test
  public void test02()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar((-1789), (-1789), (-1789));
      GregorianCalendar0.set(0, 489);
      Locale locale0 = Locale.CANADA_FRENCH;
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
        // assertThrownBy("java.util.GregorianCalendar", e);
      }
  }

  @Test
  public void test03()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt((-4041), 1, 5, 617, 0, "5hmSk,Hbtkf-i`/xDQ_", "6XP6wTq-EF");
      linkedList0.offerFirst(appt0);
      Appt appt1 = new Appt(5, 5, 5, 5, 0, "", "");
      timeTable0.deleteAppt(linkedList0, appt1);
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, (Appt) null);
      assertNull(linkedList1);
  }
/*
  @Test
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-43));
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-43));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Appt appt0 = new Appt(3, 3, (-43), (-43), (-43), "9", "");
      linkedList0.add(appt0);
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar((TimeZone) zoneInfo0, locale0);
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar((-43), (-43), (-43));
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
      //assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-43,MONTH=-43,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-43,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, linkedList1.size());
  }
*//*
  @Test
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-43));
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-43));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar((TimeZone) zoneInfo0, locale0);
      Appt appt0 = new Appt(3, 3, 3, 2, (-43), "9", "");
      linkedList0.offer(appt0);
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar((-43), (-43), (-43));
      GregorianCalendar1.setTimeInMillis(3);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
        // assertThrownBy("java.util.LinkedList", e);
      }
  }
*/
  @Test
  public void test07()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Second date specified is not before the first date specified.
         //
        // assertThrownBy("edu.osu.cs362.TimeTable", e);
      }
  }
/*
  @Test
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar(locale0);
      Appt appt0 = new Appt(3, 3, 3, 2, 0, "", "");
      linkedList0.offer(appt0);
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar(0, 0, 0);
      GregorianCalendar1.setTimeInMillis(3);
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
      assertEquals(1, linkedList1.size());
  }
*//*
  @Test
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-43));
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-43));
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar((TimeZone) zoneInfo0, locale0);
      Appt appt0 = new Appt(3, 3, 3, 3, 3, "", "");
      linkedList0.offer(appt0);
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar((-43), (-43), (-43));
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
      //assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-43,MONTH=-43,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-43,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar1.toString());
      assertEquals(1, linkedList1.size());
  }
*//*
  @Test
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(2);
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      GregorianCalendar GregorianCalendar0 = new GregorianCalendar((TimeZone) zoneInfo0, locale0);
      Appt appt0 = new Appt(3, 3, 3, 3, 2, "", "");
      linkedList0.offer(appt0);
      GregorianCalendar GregorianCalendar1 = new GregorianCalendar(2, 2, 2);
      GregorianCalendar1.setTimeInMillis(3);
      LinkedList<CalDay> linkedList1 = timeTable0.getApptRange(linkedList0, GregorianCalendar0, GregorianCalendar1);
      assertEquals(1, linkedList1.size());
  }
*/
  @Test
  public void test11()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt(3, 3, 3, 3, 2, "", "");
      linkedList0.offer(appt0);
      timeTable0.deleteAppt(linkedList0, appt0);
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      linkedList0.add((Appt) null);
      Appt appt0 = new Appt(5, 5, 5, 5, 0, "", "");
      // Undeclared exception!
      try { 
        timeTable0.deleteAppt(linkedList0, appt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         //assertThrownBy("edu.osu.cs362.TimeTable", e);
      }
  }

  @Test
  public void test13()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      Appt appt0 = new Appt((-4041), 5, 5, 5, 5, "", "");
      LinkedList<Appt> linkedList0 = timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
      assertNull(linkedList0);
  }

  @Test
  public void test14()  throws Throwable  {
      TimeTable timeTable0 = new TimeTable();
      LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
      Appt appt0 = new Appt((-4041), 1, 5, 617, 0, "5hmSk,Hbtkf-i`/xDQ_", "6XP6wTq-EF");
      LinkedList<Appt> linkedList1 = timeTable0.deleteAppt(linkedList0, appt0);
      assertNull(linkedList1);
  }
}
